quit
c
File.read(filepath).split("\n")
File.read(filepath).split('\n')
File.read(filepath)
File.read(output)
output = filepath.gsub('input', 'output')
JSON.parse(File.read(filepath))
require 'json'
JSON.parse(File.read(filepath))
File.read(filepath)
filepath.gsub('input', 'output')
filepath
filename
c
filepaths
quit
file_path.split('/').last
file_path
c
file_path
c
n/2
h
y_s[h..].to_i
y_s[0..o].to_i
n
x_s[h..].to_i
b
n
a
n
a
o
n
h
n
y_s
x_s
n
x_s
3/2
n_y
self.send(:n)
n
n_y
n_x
dn
n
dn
n
y
x
n_x
c
-3.abs
s2
n
s1
y
x
c
y
x
s2
c
s1
c
[n_x, n_y].max
y_s[h..].to_i
y_s[0..o].to_i
x_s[h..].to_i
x_s[0..o].to_i
y
x
c
scope
binding.send(:a)
binding.a
binding
c
[n_x, n_y].max
c
[n_x, n_y].max
c
[n_x, n_y].max
c
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
n
[n_x, n_y].max
c
product
c
n
s4
n
s4
s3
n
s2
n
s1
n
s1
x_s[h..].to_i
d
n
send(:b)
n
a
n
c
a
n
c
x_s[1..]
x_s
x_s[h..].to_i
b
n
a
n
send(:h)
h
c
x_s[0..(n/2)]
a
x_s.length
send(:n)
n
y_s
x_s
c
described_class
c
described_class
